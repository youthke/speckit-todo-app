openapi: 3.0.3
info:
  title: Todo App User Management API
  description: DDD-based User Management API for Todo Application
  version: 2.0.0
  contact:
    name: Todo App Team

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

paths:
  /users/register:
    post:
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/profile:
    get:
      summary: Get user profile
      description: Retrieve the authenticated user's profile
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user profile
      description: Update the authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/preferences:
    get:
      summary: Get user preferences
      description: Retrieve the authenticated user's preferences
      responses:
        '200':
          description: Successfully retrieved user preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user preferences
      description: Update the authenticated user's preferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPreferencesRequest'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
          maxLength: 255
        profile:
          $ref: '#/components/schemas/UserProfile'
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        created_at:
          type: string
          format: date-time
          description: User registration timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - email
        - profile
        - preferences
        - created_at
        - updated_at

    UserProfile:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
          maxLength: 50
        last_name:
          type: string
          description: User's last name
          maxLength: 50
        timezone:
          type: string
          description: User's timezone (IANA format)
          example: "America/New_York"
      required:
        - first_name
        - last_name
        - timezone

    UserPreferences:
      type: object
      properties:
        default_task_priority:
          type: string
          enum: [low, medium, high]
          description: Default priority for new tasks
          default: medium
        email_notifications:
          type: boolean
          description: Whether to send email notifications
          default: true
        theme_preference:
          type: string
          enum: [light, dark, auto]
          description: UI theme preference
          default: auto
      required:
        - default_task_priority
        - email_notifications
        - theme_preference

    RegisterUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          maxLength: 255
        profile:
          $ref: '#/components/schemas/UserProfile'
        preferences:
          $ref: '#/components/schemas/UserPreferences'
      required:
        - email
        - profile

    UpdateUserProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
          maxLength: 50
        last_name:
          type: string
          description: User's last name
          maxLength: 50
        timezone:
          type: string
          description: User's timezone (IANA format)

    UpdateUserPreferencesRequest:
      type: object
      properties:
        default_task_priority:
          type: string
          enum: [low, medium, high]
          description: Default priority for new tasks
        email_notifications:
          type: boolean
          description: Whether to send email notifications
        theme_preference:
          type: string
          enum: [light, dark, auto]
          description: UI theme preference

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
      required:
        - error
        - message